// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/akarasz/yahtzee/controller (interfaces: Root,Game)

// Package mocks is a generated GoMock package.
package mocks

import (
	controller "github.com/akarasz/yahtzee/controller"
	models "github.com/akarasz/yahtzee/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRoot is a mock of Root interface
type MockRoot struct {
	ctrl     *gomock.Controller
	recorder *MockRootMockRecorder
}

// MockRootMockRecorder is the mock recorder for MockRoot
type MockRootMockRecorder struct {
	mock *MockRoot
}

// NewMockRoot creates a new mock instance
func NewMockRoot(ctrl *gomock.Controller) *MockRoot {
	mock := &MockRoot{ctrl: ctrl}
	mock.recorder = &MockRootMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoot) EXPECT() *MockRootMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRoot) Create() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRootMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoot)(nil).Create))
}

// Get mocks base method
func (m *MockRoot) Get(arg0 string) (*models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRootMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoot)(nil).Get), arg0)
}

// Scores mocks base method
func (m *MockRoot) Scores(arg0 []string) (map[models.Category]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scores", arg0)
	ret0, _ := ret[0].(map[models.Category]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scores indicates an expected call of Scores
func (mr *MockRootMockRecorder) Scores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scores", reflect.TypeOf((*MockRoot)(nil).Scores), arg0)
}

// MockGame is a mock of Game interface
type MockGame struct {
	ctrl     *gomock.Controller
	recorder *MockGameMockRecorder
}

// MockGameMockRecorder is the mock recorder for MockGame
type MockGameMockRecorder struct {
	mock *MockGame
}

// NewMockGame creates a new mock instance
func NewMockGame(ctrl *gomock.Controller) *MockGame {
	mock := &MockGame{ctrl: ctrl}
	mock.recorder = &MockGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGame) EXPECT() *MockGameMockRecorder {
	return m.recorder
}

// AddPlayer mocks base method
func (m *MockGame) AddPlayer(arg0 *models.User, arg1 string) (*controller.AddPlayerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", arg0, arg1)
	ret0, _ := ret[0].(*controller.AddPlayerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayer indicates an expected call of AddPlayer
func (mr *MockGameMockRecorder) AddPlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockGame)(nil).AddPlayer), arg0, arg1)
}

// Lock mocks base method
func (m *MockGame) Lock(arg0 *models.User, arg1, arg2 string) (*controller.LockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1, arg2)
	ret0, _ := ret[0].(*controller.LockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock
func (mr *MockGameMockRecorder) Lock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockGame)(nil).Lock), arg0, arg1, arg2)
}

// Roll mocks base method
func (m *MockGame) Roll(arg0 *models.User, arg1 string) (*controller.RollResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roll", arg0, arg1)
	ret0, _ := ret[0].(*controller.RollResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roll indicates an expected call of Roll
func (mr *MockGameMockRecorder) Roll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roll", reflect.TypeOf((*MockGame)(nil).Roll), arg0, arg1)
}

// Score mocks base method
func (m *MockGame) Score(arg0 *models.User, arg1 string, arg2 models.Category) (*controller.ScoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Score", arg0, arg1, arg2)
	ret0, _ := ret[0].(*controller.ScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Score indicates an expected call of Score
func (mr *MockGameMockRecorder) Score(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*MockGame)(nil).Score), arg0, arg1, arg2)
}
