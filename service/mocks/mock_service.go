// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/akarasz/yahtzee/service (interfaces: Game,Provider)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/akarasz/yahtzee/models"
	service "github.com/akarasz/yahtzee/service"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGame is a mock of Game interface
type MockGame struct {
	ctrl     *gomock.Controller
	recorder *MockGameMockRecorder
}

// MockGameMockRecorder is the mock recorder for MockGame
type MockGameMockRecorder struct {
	mock *MockGame
}

// NewMockGame creates a new mock instance
func NewMockGame(ctrl *gomock.Controller) *MockGame {
	mock := &MockGame{ctrl: ctrl}
	mock.recorder = &MockGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGame) EXPECT() *MockGameMockRecorder {
	return m.recorder
}

// AddPlayer mocks base method
func (m *MockGame) AddPlayer() (models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer")
	ret0, _ := ret[0].(models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayer indicates an expected call of AddPlayer
func (mr *MockGameMockRecorder) AddPlayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockGame)(nil).AddPlayer))
}

// Lock mocks base method
func (m *MockGame) Lock(arg0 int) (models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].(models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock
func (mr *MockGameMockRecorder) Lock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockGame)(nil).Lock), arg0)
}

// Roll mocks base method
func (m *MockGame) Roll() (models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roll")
	ret0, _ := ret[0].(models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roll indicates an expected call of Roll
func (mr *MockGameMockRecorder) Roll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roll", reflect.TypeOf((*MockGame)(nil).Roll))
}

// Score mocks base method
func (m *MockGame) Score(arg0 models.Category) (models.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Score", arg0)
	ret0, _ := ret[0].(models.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Score indicates an expected call of Score
func (mr *MockGameMockRecorder) Score(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Score", reflect.TypeOf((*MockGame)(nil).Score), arg0)
}

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockProvider) Create(arg0 models.Game, arg1 models.User) service.Game {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(service.Game)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockProviderMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProvider)(nil).Create), arg0, arg1)
}
